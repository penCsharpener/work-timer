@page "/workingday/{Year:int}/{Month:int}/{Day:int}"

@using WorkTimer.Models
@inject WorkTimer.Contracts.IWorkPeriodRepository workPeriodRepo
@inject WorkTimer.Contracts.IWorkingDayRepository workingDayRepo
@inject NavigationManager NavigationManager

<h1>Working day details for @workingDay?.Date.DayOfWeek @workingDay?.Date.ToString("dd.MM.yyyy")</h1>

<table class="table table-striped table-hover table-sm">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Start Time</th>
            <th scope="col">End Time</th>
            <th scope="col">Is Break</th>
            <th scope="col">Comment</th>
            <th scope="col">Edit</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < workPeriods.Count; i++) {
            <tr>
                <th scope="row">@workPeriods[i].Id</th>
                <td>@workPeriods[i].StartTime.ToString()</td>
                <td>@workPeriods[i].EndTime.ToString()</td>
                <td>@(workPeriods[i].IsBreak ? "yes" : "no")</td>
                <td>@workPeriods[i].Comment</td>
                <td><a href="workperiod/@(workPeriods[i].Id)/edit"><span class="oi oi-pencil" title="oi-pencil" aria-hidden="true"></span></a></td>
            </tr>
        }
    </tbody>
</table>

@code {

    [Parameter]
    public int Year { get; set; }
    [Parameter]
    public int Month { get; set; }
    [Parameter]
    public int Day { get; set; }

    List<WorkTimer.Models.WorkPeriod> workPeriods = new List<WorkTimer.Models.WorkPeriod>();
    WorkTimer.Models.WorkingDay? workingDay = new WorkTimer.Models.WorkingDay();

    protected override async Task OnInitializedAsync() {
        workPeriods = (await workPeriodRepo.FindByDate(new DateTime(Year, Month, Day))).ToList();
        workingDay = await workingDayRepo.FindByDate(new DateTime(Year, Month, Day));
        await base.OnInitializedAsync();
    }
}
