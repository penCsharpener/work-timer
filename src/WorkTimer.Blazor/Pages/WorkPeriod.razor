@page "/workingday/{Id:int}/workperiod/{BreakId:int}"

@using WorkTimer.Models
@inject WorkTimer.Contracts.IWorkPeriodRepository workPeriodRepo
@inject WorkTimer.Contracts.IWorkingDayRepository workingDayRepo
@inject WorkTimer.Contracts.IWorkBreakRepository workBreakRepo
@inject NavigationManager NavigationManager

    <h1>Work period details for @workPeriod.StartTime.ToString("dd.MM.yyyy HH:mm:ss")</h1>

<table class="table table-striped table-hover table-sm">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Start Time</th>
            <th scope="col">End Time</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < workBreaks.Count; i++) {
            <tr onclick="location.href='workingday/@Id/workperiod/@workBreaks[i].Id'">
                <th scope="row">@workBreaks[i].Id</th>
                <td>@workBreaks[i].StartTime.ToString()</td>
                <td>@workBreaks[i].EndTime.ToString()</td>
            </tr>
        }
    </tbody>
</table>

@code {

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int BreakId { get; set; }

    WorkTimer.Models.WorkPeriod workPeriod = new WorkTimer.Models.WorkPeriod();
    WorkTimer.Models.WorkingDay workingDay = new WorkTimer.Models.WorkingDay();
    List<WorkTimer.Models.WorkBreak> workBreaks = new List<WorkTimer.Models.WorkBreak>();

    protected override async Task OnInitializedAsync() {
        workPeriod = (await workPeriodRepo.FindByWorkingDayIds(new int[] { Id })).FirstOrDefault();
        workingDay = (await workingDayRepo.FindByIds(new int[] { Id })).FirstOrDefault();
        workBreaks = (await workBreakRepo.FindByWorkPeriodIds(new int[] { BreakId })).ToList();
        await base.OnInitializedAsync();
    }
}
