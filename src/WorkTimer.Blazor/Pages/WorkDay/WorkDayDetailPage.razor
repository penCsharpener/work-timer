@page "/workday/{WorkDayId:int}"
@using Microsoft.AspNetCore.Components.Web
@inject global::MediatR.IMediator Mediator
@inject NavigationManager Navi;
@attribute [Authorize]

<h1>Work day details for @Model.WorkDay?.Date.DayOfWeek @Model.WorkDay?.Date.ToString("dd.MM.yyyy")</h1>

<div class="d-flex flex-row justify-content-between">
    <div>
        <EditForm class="d-flex mb-3" Model="@Model.WorkDay" OnValidSubmit="HandleValidSubmitAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label class="mx-3 mt-2 align-self-center" for="txtComment">Work day type: </label>
            <MatBlazor.MatSelectItem class="mx-3" id="txtComment" Items="WorkDayTypes" @bind-Value="Model.WorkDay.WorkDayType">
            </MatBlazor.MatSelectItem>

            <label class="mx-3 mt-2 align-self-center" for="cboContract">Contract: </label>
            <MatBlazor.MatSelectValue @bind-Value="Model.WorkDay.ContractId"
                                      Items="@Model.Contracts"
                                      ValueSelector="@(i => i.Id)"
                                      class="mx-3"
                                      id="cboContract">
                <ItemTemplate Context="contractItem">
                    <span>@contractItem.Name</span>
                </ItemTemplate>
            </MatBlazor.MatSelectValue>

            <MatButton Class="btn btn-outline-primary ml-4 align-self-center" Raised="true" Type="submit">Save</MatButton>
        </EditForm>
    </div>
    <div class="mt-2">
        <MatButton OnClick="@OpenDialog" Raised="false" Type="button">Delete</MatButton>

        <MatDialog @bind-IsOpen="@dialogIsOpen">
            <MatDialogTitle>Delete work day</MatDialogTitle>
            <MatDialogContent>
                <p>Do you really want to delete this with all its working periods?</p>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
                <MatButton OnClick="@OkClickAsync">OK</MatButton>
            </MatDialogActions>
        </MatDialog>
    </div>
</div>

<table class="table table-striped table-hover table-sm">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Start Time</th>
            <th scope="col">End Time</th>
            <th scope="col">Length</th>
            <th scope="col">Comment</th>
            <th scope="col">Edit</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var period in Model.WorkingPeriods) {
            <tr>
                <th scope="row">@period.Id</th>
                <td>@period.StartTime.ToString()</td>
                <td>@period.EndTime.ToString()</td>
                <td>@period.GetWorkTime().ToTimeString()</td>
                <td>@period.Comment</td>
                <td onclick="location.href='/workday/@WorkDayId/workperiod/@(period.Id)'"><span class="oi oi-pencil" title="oi-pencil" aria-hidden="true"></span></td>
            </tr>
        }
    </tbody>
</table>

@code {

    [Parameter]
    public int WorkDayId { get; set; }

    public GetWorkDayDetailsResponse Model { get; set; }

    public WorkTimer.Domain.Models.WorkDayType[] WorkDayTypes { get; set; } = Enum.GetValues(typeof(WorkTimer.Domain.Models.WorkDayType)).Cast<WorkTimer.Domain.Models.WorkDayType>().ToArray();

    protected override async Task OnInitializedAsync() {
        Model = await Mediator.Send(new GetWorkDayDetailsRequest(WorkDayId));
    }

    protected async Task HandleValidSubmitAsync() {
        var result = await Mediator.Send(Model);
    }

    bool dialogIsOpen = false;

    void OpenDialog() {
        dialogIsOpen = true;
    }

    async Task OkClickAsync() {
        var result = await Mediator.Send(new DeleteWorkDayRequest(Model.WorkDay) { User = Model.UserContext.User });
        if (result) {
            dialogIsOpen = false;
            Navi.NavigateTo($"/");
        }
    }
}
