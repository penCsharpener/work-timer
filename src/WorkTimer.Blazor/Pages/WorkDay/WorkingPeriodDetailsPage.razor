@page "/workday/{WorkDayId:int}/workperiod/{WorkingPeriodId:int}"
@inject global::MediatR.IMediator Mediator
@inject NavigationManager Navi;
@attribute [Authorize]

<h1>Edit work period @(Model.WorkingPeriod.StartTime.ToString())@GetEndTimeForTitle()</h1>

<EditForm Model="@Model.WorkingPeriod" OnValidSubmit="HandleValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-row">
        <div class="form-group col-md-6">
            <label For="dtpStartTime">StartTime</label>
            <MatBlazor.MatDatePicker id="dtpStartTime" class="form-control" EnableTime="true" Enable24hours="true" placeholder="@DateTime.Now.ToString("G")" @bind-Value="Model.StartTime" />
        </div>

        <div class="form-group col-md-6">
            <label For="dtpEndTime">EndTime</label>
            <MatBlazor.MatDatePicker id="dtpEndTime" class="form-control" EnableTime="true" Enable24hours="true" placeholder="@DateTime.Now.ToString("G")" @bind-Value="Model.EndTime" />
        </div>
    </div>

    <div class="form-group">
        <label class="w-100" for="txtComment">Comment</label>
        <InputTextArea id="txtComment" class="form-control w-100" @bind-Value="Model.WorkingPeriod.Comment" />
    </div>

    <button class="btn btn-outline-primary" type="submit">Save</button>

</EditForm>

@code {
    [Parameter]
    public int WorkDayId { get; set; }

    [Parameter]
    public int WorkingPeriodId { get; set; }

    public GetWorkingPeriodResponse Model { get; set; }

    protected override async Task OnInitializedAsync() {
        Model = await Mediator.Send(new GetWorkingPeriodRequest(WorkDayId, WorkingPeriodId));
    }

    protected async Task HandleValidSubmitAsync() {
        var result = await Mediator.Send(Model);

        Navi.NavigateTo($"/workday/{Model.WorkingPeriod.WorkDayId}");
    }

    protected string GetEndTimeForTitle() {
        return Model.WorkingPeriod.EndTime.HasValue ? " - " + Model.WorkingPeriod.EndTime.Value.ToString() : "";
    }
}
