@page "/"
@inject global::MediatR.IMediator Mediator
@inject NavigationManager Navigation;
@attribute [Authorize]

<h1 class="mb-2">Timer</h1>

<div class="row mb-3">
    <EditForm class="form-inline" Model="@NewPeriodModel" OnValidSubmit="@HandleValidSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label class="mr-3" for="periodComment">Comment</label>
            <InputText class="mr-3" id="periodComment" @bind-Value="@NewPeriodModel.Comment" style="width:40rem" />
        </div>
        <button type="submit" class="btn btn-primary">@dayButtonText</button>
    </EditForm>
</div>

@*<h3>@MostRecentTitle</h3>

    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Start Time</th>
                <th scope="col">End Time</th>
                <th scope="col">Length</th>
                <th scope="col">Is Break</th>
                <th scope="col">Comment</th>
                <th scope="col">Edit</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < workPeriods.Count; i++) {
                <tr>
                    <th scope="row">@workPeriods[i].Id</th>
                    <td>@workPeriods[i].StartTime.ToString()</td>
                    <td>@workPeriods[i].EndTime.ToString()</td>
                    <td>@workPeriods[i].Length</td>
                    <td>@(workPeriods[i].IsBreak ? "yes" : "no")</td>
                    <td>@workPeriods[i].Comment</td>
                    <td onclick="location.href='workperiod/@(workPeriods[i].Id)/edit'"><span class="oi oi-pencil" title="oi-pencil" aria-hidden="true"></span></td>
                </tr>
            }
        </tbody>
    </table>*@

<h3>Total Overhours</h3>

<p>@IndexResponse.TotalOverHours</p>

@if (IndexResponse?.WorkDays?.Any() == true) {
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th scope="col">Day of Week</th>
                <th scope="col">Date</th>
                <th scope="col">Time worked</th>
                <th scope="col">Overhours</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < IndexResponse.WorkDays.Count; i++) {
                <tr onclick="location.href='workday/@IndexResponse.WorkDays[i].Id'">
                    <td>@IndexResponse.WorkDays[i].Date.DayOfWeek.ToString()</td>
                    <td>@IndexResponse.WorkDays[i].Date.ToString("dd.MM.yyyy")</td>
                    <td>@IndexResponse.WorkDays[i].WorkTime.ToTimeString()</td>
                    <td>@IndexResponse.WorkDays[i].Overhours.ToTimeString()</td>
                </tr>
            }
        </tbody>
    </table>
} else {
    @CheckForContracts()
}

@code {

    public IndexResponse IndexResponse { get; set; }

    public NewWorkPeriodRequest NewPeriodModel { get; set; } = new NewWorkPeriodRequest();

    public string dayButtonText;

    protected override async Task OnInitializedAsync() {
        IndexResponse = await Mediator.Send(new IndexRequest());
        EvaluateButtonText();
        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmitAsync() {
        var result = await Mediator.Send(new NewWorkPeriodRequest());
        NewPeriodModel = new NewWorkPeriodRequest();
        EvaluateButtonText();
        Navigation.NavigateTo("/");
    }

    private string CheckForContracts() {
        var contract = Mediator.Send(new ContractListRequest()).GetAwaiter().GetResult();
        if (contract?.Contracts?.Any() == false) {
            Navigation.NavigateTo("/contracts/add");
        }
        return "";
    }

    private void EvaluateButtonText() {
        dayButtonText = IndexResponse.HasOngoingWorkPeriod ? "Stop" : "Start";
    }
}