@page "/"

@using Microsoft.Extensions.Options
@using WorkTimer.Config
@using WorkTimer.Contracts
@inject IWorkingDayRepository workingDayRepo
@inject IWorkPeriodRepository workPeriodRepo
@inject IWorkBreakRepository workBreakRepo
@inject IDbInitService dbService
@inject IToggleTracking toggleTracking
@inject IOptions<SqliteConfiguration> options
@inject NavigationManager NavigationManager

<h1 class="mb-2">Timer</h1>

<div class="row mb-3">
    <EditForm class="form-inline" Model="@newPeriod" OnValidSubmit="@HandleValidSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label class="mr-3" for="periodComment">Comment</label>
            <InputText class="mr-3" id="periodComment" @bind-Value="@newPeriod.Comment" style="width:40rem" />
            <label class="mr-3" for="isBreak">Break</label>
            <InputCheckbox class="mr-3" id="isBreak" @bind-Value="@newPeriod.IsBreak" />
        </div>
        <button type="submit" class="btn btn-primary">@dayButtonText</button>
    </EditForm>
</div>

<h3>Total Overhours</h3>

<p>@totalOverhours</p>

<table class="table table-striped table-hover table-sm">
    <thead>
        <tr>
            <th scope="col">Day of Week</th>
            <th scope="col">Date</th>
            <th scope="col">Time worked</th>
            <th scope="col">Overhours</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < workingDays.Count; i++) {
            <tr onclick="location.href='workingday/@workingDays[i].Date.Year/@workingDays[i].Date.Month/@workingDays[i].Date.Day'">
                <td>@workingDays[i].Date.DayOfWeek.ToString()</td>
                <td>@workingDays[i].Date.ToString("dd.MM.yyyy")</td>
                <td>@workingDays[i].WorkTime.ToTimeString()</td>
                <td>@workingDays[i].Overhours.ToTimeString()</td>
            </tr>
        }
    </tbody>
</table>


@code {
    List<WorkTimer.Models.WorkingDay> workingDays = new List<WorkTimer.Models.WorkingDay>();

    private string dayButtonText = "Start Work";
    private string totalOverhours = "";

    protected override async Task OnInitializedAsync() {
        if (!System.IO.File.Exists(options.Value.DatabaseFullPath))
        {
            dbService.CreateDatabase();
            await dbService.CreateTable();
        }
        var incomplete = await workPeriodRepo.GetIncomplete();
        dayButtonText = incomplete?.Any() == true ? "Stop" : "Start";

        workingDays = (await workingDayRepo.GetAll()).ToList();
        totalOverhours = (await workingDayRepo.GetTotalOverhours()).ToTimeString();
        await base.OnInitializedAsync();
    }

    public WorkTimer.Models.WorkPeriod newPeriod = new WorkTimer.Models.WorkPeriod();

    private async Task HandleValidSubmitAsync() {
        await toggleTracking.ToggleTracking(DateTime.Now, newPeriod.IsBreak, newPeriod.Comment);
        newPeriod = new WorkTimer.Models.WorkPeriod();
        var incomplete = await workPeriodRepo.GetIncomplete();
        dayButtonText = incomplete?.Any() == true ? "Stop" : "Start";
        workingDays = (await workingDayRepo.GetAll()).ToList();
        NavigationManager.NavigateTo("/");
    }
}
