@page "/"
@inject global::MediatR.IMediator Mediator
@inject NavigationManager Navi;
@attribute [Authorize]

<h1 class="mb-2">Timer</h1>

<div class="row mb-3">
    <EditForm class="form-inline" Model="@NewPeriodModel" OnValidSubmit="@HandleValidSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label class="mr-3" for="periodComment">Comment</label>
            <InputText class="mr-3" id="periodComment" @bind-Value="@NewPeriodModel.Comment" style="width:40rem" />
        </div>
        <button type="submit" class="btn btn-primary">@dayButtonText</button>
    </EditForm>
</div>

<h3>Most recent work periods</h3>

<table class="table table-striped table-hover table-sm">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Start Time</th>
            <th scope="col">End Time</th>
            <th scope="col">Length</th>
            <th scope="col">Comment</th>
            <th scope="col">Edit</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var period in IndexResponse.MostRecentWorkPeriods) {
            <tr>
                <th scope="row">@period.Id</th>
                <td>@period.StartTime.ToString()</td>
                <td>@period.EndTime.ToString()</td>
                <td>@period.WorkTime.ToTimeString()</td>
                <td>@period.Comment</td>
                <td onclick="location.href='workday/@period.WorkDayId/workperiod/@period.Id'"><span class="oi oi-pencil" title="oi-pencil" aria-hidden="true"></span></td>
            </tr>
        }
    </tbody>
</table>

<h3>Total Overhours</h3>

<p>@IndexResponse.TotalOverHours.ToTimeString()</p>

@if (IndexResponse?.WorkDays?.Any() == true) {
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th scope="col">Day of Week</th>
                <th scope="col">Date</th>
                <th scope="col">Time worked</th>
                <th scope="col">Overhours</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workDay in IndexResponse.WorkDays) {
                <tr onclick="location.href='workday/@workDay.Id'">
                    <td>@workDay.Date.DayOfWeek.ToString()</td>
                    <td>@workDay.Date.ToString("dd.MM.yyyy")</td>
                    <td>@workDay.WorkTime.ToTimeString()</td>
                    <td>@workDay.Overhours.ToTimeString()</td>
                </tr>
            }
        </tbody>
    </table>
} else {
    @CheckForContracts()
}

@code {

    public IndexResponse IndexResponse { get; set; }

    public NewWorkPeriodRequest NewPeriodModel { get; set; } = new NewWorkPeriodRequest();

    public string dayButtonText;

    protected override async Task OnInitializedAsync() {
        IndexResponse = await Mediator.Send(new IndexRequest());
        EvaluateButtonText();
        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmitAsync() {
        var result = await Mediator.Send(new NewWorkPeriodRequest());
        NewPeriodModel = new NewWorkPeriodRequest();
        EvaluateButtonText();
        Navi.NavigateTo("/");
    }

    private string CheckForContracts() {
        var contract = Mediator.Send(new ContractListRequest()).GetAwaiter().GetResult();
        if (contract?.Contracts?.Any() == false) {
            Navi.NavigateTo("/contracts/add");
        }
        return "";
    }

    private void EvaluateButtonText() {
        dayButtonText = IndexResponse.HasOngoingWorkPeriod ? "Stop" : "Start";
    }
}